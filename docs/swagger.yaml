basePath: /api
definitions:
  model.AddToCartRequest:
    properties:
      product_id:
        type: integer
      quantity:
        minimum: 1
        type: integer
    required:
    - product_id
    - quantity
    type: object
  model.CartItemDetail:
    properties:
      id:
        type: integer
      name:
        type: string
      price:
        type: number
      product_id:
        type: integer
      quantity:
        type: integer
      subtotal:
        type: number
    type: object
  model.CartResponse:
    properties:
      id:
        type: integer
      items:
        items:
          $ref: '#/definitions/model.CartItemDetail'
        type: array
      total:
        type: number
    type: object
  model.CreateOrderRequest:
    properties:
      shipping_address:
        type: string
    required:
    - shipping_address
    type: object
  model.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  model.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  model.LoginResponse:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/model.UserResponse'
    type: object
  model.OrderItemDetail:
    properties:
      name:
        type: string
      price:
        type: number
      product_id:
        type: integer
      quantity:
        type: integer
      subtotal:
        type: number
    type: object
  model.OrderResponse:
    properties:
      created_at:
        type: string
      id:
        type: integer
      items:
        items:
          $ref: '#/definitions/model.OrderItemDetail'
        type: array
      shipping_address:
        type: string
      status:
        type: string
      total_amount:
        type: number
    type: object
  model.OrdersResponse:
    properties:
      orders:
        items:
          $ref: '#/definitions/model.OrderResponse'
        type: array
    type: object
  model.ProductRequest:
    properties:
      category_id:
        type: integer
      description:
        type: string
      image_url:
        type: string
      name:
        type: string
      price:
        type: number
      stock:
        minimum: 0
        type: integer
    required:
    - name
    - price
    - stock
    type: object
  model.ProductResponse:
    properties:
      category_id:
        type: integer
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      image_url:
        type: string
      name:
        type: string
      price:
        type: number
      stock:
        type: integer
      updated_at:
        description: Use pointer to handle NULL
        type: string
    type: object
  model.ProductsResponse:
    properties:
      products:
        items:
          $ref: '#/definitions/model.ProductResponse'
        type: array
      total:
        type: integer
    type: object
  model.RegisterAdminRequest:
    properties:
      admin_secret:
        type: string
      email:
        type: string
      full_name:
        type: string
      password:
        minLength: 6
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - admin_secret
    - email
    - full_name
    - password
    - username
    type: object
  model.RegisterRequest:
    properties:
      email:
        type: string
      full_name:
        type: string
      password:
        minLength: 6
        type: string
      username:
        type: string
    required:
    - email
    - full_name
    - password
    - username
    type: object
  model.RegisterResponse:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/model.UserResponse'
    type: object
  model.UserResponse:
    properties:
      id:
        type: integer
      role:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: ini_email@ordent.com
    name: API Support
  description: API for E-Commerce platform
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: E-Commerce API
  version: "1.0"
paths:
  /auth/admin-register:
    post:
      consumes:
      - application/json
      description: Register an admin with secret code
      parameters:
      - description: Admin Registration data
        in: body
        name: register
        required: true
        schema:
          $ref: '#/definitions/model.RegisterAdminRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.RegisterResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Register a new admin
      tags:
      - auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login with username and password
      parameters:
      - description: Login credentials
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/model.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Login user
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register with username, email and password
      parameters:
      - description: Registration data
        in: body
        name: register
        required: true
        schema:
          $ref: '#/definitions/model.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.RegisterResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Register a new user
      tags:
      - auth
  /cart:
    get:
      consumes:
      - application/json
      description: Get the current user's shopping cart
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.CartResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user's cart
      tags:
      - cart
  /cart/items:
    post:
      consumes:
      - application/json
      description: Add a product to the user's shopping cart
      parameters:
      - description: Item to add
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/model.AddToCartRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.CartResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Add item to cart
      tags:
      - cart
  /cart/items/{id}:
    delete:
      consumes:
      - application/json
      description: Remove an item from the user's shopping cart
      parameters:
      - description: Cart Item ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.CartResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Remove item from cart
      tags:
      - cart
  /orders:
    get:
      consumes:
      - application/json
      description: Get a list of user's orders
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.OrdersResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user orders
      tags:
      - orders
    post:
      consumes:
      - application/json
      description: Create a new order from cart items
      parameters:
      - description: Order data
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/model.CreateOrderRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.OrderResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new order
      tags:
      - orders
  /products:
    get:
      consumes:
      - application/json
      description: Get list of all products with optional filtering
      parameters:
      - description: Filter by category ID
        in: query
        name: category_id
        type: integer
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ProductsResponse'
      summary: Get products list
      tags:
      - products
    post:
      consumes:
      - application/json
      description: Create a new product
      parameters:
      - description: Product data
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/model.ProductRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.ProductResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new product
      tags:
      - products
  /products/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a product
      tags:
      - products
    get:
      consumes:
      - application/json
      description: Get a single product by its ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ProductResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Get product by ID
      tags:
      - products
    put:
      consumes:
      - application/json
      description: Update an existing product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Product data
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/model.ProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ProductResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a product
      tags:
      - products
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and the JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
